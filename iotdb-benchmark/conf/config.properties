#JDBC HOST and PORT
#Database and Default PORT:
#IoTDB: 6667
#TimescaleDB: 5432
HOST=10.0.0.6
PORT=8086
#RESTful URL
#INFLUX_URL=http://127.0.0.1:8086
#OPENTSDB_URL=http://127.0.0.1:4242
#CTSDB_URL=http://10.104.27.14:9200
#KairosDB_URL=http://127.0.0.1:8080
DB_URL=http://10.0.0.6:8086
#Currently support databases:
#IoTDB
#InfluxDB
#OpenTSDB
#CTSDB
#KairosDB
#TimescaleDB
#FakeDB
DB_SWITCH=InfluxDB
#Database name, only required for InfluxDB and TimescaleDB
DB_NAME=benchmark
# Project ID to specify a name for a given benchmarking project. Can be 'None' if not wanted.
PROJECT_ID=ING_INC_SENSOR_NUM
PROJECT_TYPE=INGESTION
### benchmark work mode ###
#Currently supports multiple operating modes, namely：
#testWithDefaultPath--Routine test mode, supporting a mixed load of multiple read and write operations
#writeWithRealDataSet--Write real data set mode, need to configure FILE_PATH and DATA_SET
#queryWithRealDataSet--To query the real data set mode, you need to configure REAL_QUERY_START_TIME, REAL_QUERY_STOP_TIME, DATA_SET, and query related parameters in testWithDefaultPath mode
#serverMODE--Server resource usage monitoring mode (run in this mode is started by ser-benchmark.sh script, there is no need to manually configure this parameter)
#importDataFromCSV--Read data pattern from CSV file
BENCHMARK_WORK_MODE=testWithDefaultPath
#The proportion of each operation is written in order: Q1: Q2: Q3: Q4: Q5: Q6: Q7: Q8, please pay attention to using English colons. Each term in the scale is an integer.
#The query represented by #Qi is as follows:
#Q1--Exact point query: select v1... from data where time = ? and device in ?
#Q2--Range query (only limit start and end time): select v1... from data where time > ? and time < ? and device in ?
#Q3--Range query with value filtering: select v1... from data where time > ? and time < ? and v1 > ? and device in ?
#Q4--Aggregated query with time filtering: select func(v1)... from data where device in ? and time > ? and time < ?
#Q5--Aggregated query with value filtering: select func(v1)... from data where device in ? and value > ?
#Q6--Aggregated query with value filtering and time filtering: select func(v1)... from data where device in ? and value > ? and time > ? and time < ?
#Q7--Grouped aggregate query:（GROUP BY）（Only statements with a time interval can be generated for the time being）
#Q8--Nearest point query: select time, v1... where device = ? and time = max(time)
OPERATION_PROPORTION=1:0:0:0:0:0:0:0:0
#Whether to clear old data before starting the test (whether to perform cleanup) Except for IoTDB, because IoTDB does not support deleting Storage Group
IS_DELETE_DATA=true
#Write data start time
START_TIME=2018-9-20T00:00:00+08:00
#Remarks for this experiment are stored in mysql as part of the table name. Be careful not to have special characters.
REMARK=
#The version of the database. The test iotdb automatically fills in the commit ID of HEAD. It is only used for identification.
VERSION=0.8.0
### client mode ###
### Write test related parameters
#Write test mode:
#IoTDB:jdbc,session
INSERT_MODE=session
#Whether the client and device are bound. If false, the number of clients can be greater than the number of devices.
IS_CLIENT_BIND=true
#The number of concurrent clients. If the client is bound to the device, it must be less than or equal to the number of devices.
CLIENT_NUMBER=20
#Number of storage groups, must be less than or equal to the number of devices
GROUP_NUMBER=20
#Total number of devices
DEVICE_NUMBER=20
#Number of sensors per device, total number of time series = DEVICE_NUMBER * SENSOR_NUMBER
SENSOR_NUMBER=500
#Number of data lines written in batches, each line is the data of all sensors of a device 
#at a certain time stamp, and the number of data points written in each batch = SENSOR_NUMBER * BATCH_SIZE
BATCH_SIZE=100
#Operations per client thread
LOOP=10
#The ratio of the number of devices actually written to all devices, value range (0, 1)
REAL_INSERT_RATE=1.0
# Device corresponding to storage group allocation strategy
# hash indicates that the device is allocated to the storage group by hashing
# mod means that the devices are evenly distributed among the storage groups by modulo the number of storage groups (adjacent number devices are scattered in different storage groups)
# div indicates that the device is allocated to the storage group by quoting the number of storage groups (adjacent number devices are concentrated in the same storage group)
SG_STRATEGY=mod
# Timestamp interval ms (non-true rate)
POINT_STEP=5000
#Data type KairosDB do not support float as data type
DATA_TYPE=FLOAT
#Coding method PLAIN or GORILLA
ENCODING=PLAIN
#Generate the number of decimal places for the data
NUMBER_OF_DECIMAL_DIGIT=2
#Compression method UNCOMPRESSOR | SNAPPY (only valid for IoTDB)
COMPRESSOR=SNAPPY
#Whether to create the schema before writing
CREATE_SCHEMA=true
#Database initialization wait time ms
INIT_WAIT_TIME=5000
#The directory where the IoTDB data disk is located can be multiple directories, and multiple directories are separated by commas
IOTDB_DATA_DIR=/home/gouwang/tianYu/JAVA_PROJECT/incubator-iotdb/data/data
#Directory where the IoTDB pre-write log is located
IOTDB_WAL_DIR=/home/gouwang/tianYu/JAVA_PROJECT/incubator-iotdb/data/wal
#Directory of the IoTDB system folder
#/var/lib/influxdb
IOTDB_SYSTEM_DIR=/home/gouwang/tianYu/JAVA_PROJECT/incubator-iotdb/data/system
#The execution interval of adjacent operations. If the current operation takes longer than this interval, the next operation is executed immediately, otherwise wait (OP_INTERVAL-actual execution time) ms
OP_INTERVAL=0
#Whether to use cluster mode
USE_CLUSTER=false
#Effective when using cluster mode. After setting FIRST_INDEX, the start of the device is FIRST_INDEX * DEVICE_NUMBER
FIRST_INDEX=1
#Whether multiple devices are written in the batch write.The product of the number of batch write statements and the number of clients can be divided by the number of devices.
MUL_DEV_BATCH=false
#Whether it is out of order insertion mode
IS_OVERFLOW=false
#Supports multiple out-of-order modes:
#0--Out-of-order pattern by Poisson distribution
#1--Batch insert out-of-order mode
OVERFLOW_MODE=0
#Batch insertion out-of-order proportion, the value range of this parameter is (0,1)
OVERFLOW_RATIO=0.5
#Poisson Distribution Related in overflow mode 0
#the expectation and variance of Poisson Distribution based on basic model
LAMBDA=2200.0
#the max K of Poisson random variable based on basic model
MAX_K=170000
#is use random timestamp interval
IS_RANDOM_TIMESTAMP_INTERVAL=false
DATA_SEED=666
LINE_RATIO=1
SIN_RATIO=1
SQUARE_RATIO=1
RANDOM_RATIO=1
CONSTANT_RATIO=1
# workload buffer size
WORKLOAD_BUFFER_SIZE=100
# print test progress log interval in second
LOG_PRINT_INTERVAL=5
# quiet mode will mute some log output and computations
IS_QUIET_MODE=true
### Query test related parameters###
#Number of sensors involved in each query
QUERY_SENSOR_NUM=1
#Number of devices involved in each query
QUERY_DEVICE_NUM=1
#Querying Random Seeds
QUERY_SEED=151658
#When the query is aggregated, the aggregate function is set by the QUERY_AGGREGATE_FUN parameter
QUERY_AGGREGATE_FUN=count
#The time step of the time filter condition. If set to 0, the time filter condition of each query is the same.
STEP_SIZE=1
#The time interval (in ms) between the start time and the end time in the query with the start and end time, and the time interval in groupBy
QUERY_INTERVAL=250000
#Conditional query parameters
QUERY_LOWER_LIMIT=-5
#Whether the query result is empty in the exact point query
IS_EMPTY_PRECISE_POINT_QUERY=false
#Query the group size in the groupBy query (unit: ms)
TIME_UNIT=20000
#The pattern of the limit clause in the query
#0--No limit clause
#1--limit clause contains only limit
#2--limit clause contains only limit
#3--limit clause with limit and limit
LIMIT_CLAUSE_MODE=0
#Maximum number of output conditions in a conditional query with limit
QUERY_LIMIT_N=5
#Offset in conditional query with limit
QUERY_LIMIT_OFFSET=5
#Maximum number of output sequences
QUERY_SLIMIT_N=5
#Offset of the sequence
QUERY_SLIMIT_OFFSET=5
############### test data storage configurations ###############
# Use what to store test data, currently support:
# None
# IoTDB
# MySQL
TEST_DATA_PERSISTENCE=MySQL
# determines where local db (for stats) can be accessed
# directory, where to touch the file 'log_stop_flag' to stop the recording process -> this directory
DB_DATA_PATH=/home/influx/
TEST_DATA_STORE_IP=localhost
TEST_DATA_STORE_PORT=3306
TEST_DATA_STORE_DB=benchmark
TEST_DATA_STORE_USER=benchmark
TEST_DATA_STORE_PW=benchmark
###### import data from CSV file ######
IMPORT_DATA_FILE_PATH=
METADATA_FILE_PATH=
BATCH_EXECUTE_COUNT=5000
###server mode###
#System performance detection network card device name
NET_DEVICE=e
#INTERVAL=n indicates that the system information recording interval is n + 2 seconds
INTERVAL=0
###generate sample data###
#Storage group name, must include the root path root
STORAGE_GROUP_NAME=root.sgcc
#Device and sensor names, and storage group names form a complete path
TIMESERIES_NAME=wf03.wt01.temperature
#Timing type
TIMESERIES_TYPE=INT32
#Time-series data value range, separated by commas
TIMESERIES_VALUE_SCOPE=13,16

###read file mode
FILE_PATH=data/geolife/
### REDD, TDRIVE, GEOLIFE
DATA_SET=GEOLIFE
REAL_QUERY_START_TIME=1303132929000
REAL_QUERY_STOP_TIME=1303132946000
